Revise the mathematical questions and simple quesitons.

1. First and Last occurrence in a sorted array.
https://bit.ly/3Ioexjh 
-> use binary search to cut right portion, then left for first and last occurrences.

2. Peak in a mountain array.
https://leetcode.com/problems/peak-index-in-a-mountain-array/
-> uses binary search. Try to code it with using the only two conditional statements.

3. Search in a rotated and sorted array.
https://bit.ly/3rEVSK7
-> requires to find pivot and using it searching via BS to search for the element.

4. Painters partition problem (or book allocation problem)
https://bit.ly/31v3Jiy 
-> requires minimum condition to be satisfied and then execute the BS.

5. Aggressive cows problem.
https://bit.ly/3dkuQ2B 
-> requires the maximum condition to be satisfied and then execute the BS. (If you don't know sorting, it applies that so look that part up.)

6. Sum Two numbers of an array.
https://bit.ly/3DXfsDZ
-> requires summing up using carry number separately. Use double pointer approach

7. Deleting the substring inside of the string.
https://leetcode.com/problems/remove-all-occurrences-of-a-substring/
-> requires to know about the stl for string, find method and erase method.

8. Permutation of a substring inside a string.
https://leetcode.com/problems/permutation-in-string/
-> Create a counter for each letter stored in an array to apply the logic.

9. Printing the 2D array in a spiral pattern.
https://leetcode.com/problems/spiral-matrix/
->Keep the upper and lower bounds for the matrix, and update it when the for loop reaches the respective ends.

10. Turning a 2d matrix by 90 degrees
https://leetcode.com/problems/rotate-image/
->First transpose it, then reverse each column

11. Revise code for Merge and Quick Sort.

12. Returning the power set of a given set.
https://leetcode.com/problems/subsets/
->By recursiom. Exclusion and inclusion.

13. The Keypad problem
https://leetcode.com/problems/letter-combinations-of-a-phone-number/
->By recursion. 

14. The permutations problem.
https://leetcode.com/problems/permutations/
->By recursion and a loop with backtracking.

15. Rat in a maze.
https://www.geeksforgeeks.org/problems/rat-in-a-maze-problem/1
->Handle by backtracking and recursion also try using visited matrix approach instead of the old approach.

16. Reversing the K groups of nodes in LL
https://leetcode.com/problems/reverse-nodes-in-k-group/
->Handle using recursion and keep in mind to check if the group of K elements can be formed.

17. Hare and tortoise method (Floyd cycle detection algorithm).
https://leetcode.com/problems/linked-list-cycle-ii/
->Using  a slow and fast pointer on can detect loops and for non looping lists can find the mid of the loop in constant space .

18. Removing Duplicates from an unsorted LL
https://www.naukri.com/code360/problems/remove-duplicates-from-unsorted-linked-list_1069331?source=youtube&campaign=YouTube_Lovebabbar29thJan&utm_source=youtube&utm_medium=affiliate&utm_campaign=YouTube_Lovebabbar29thJan&leftPanelTabValue=SUBMISSION
->This has three approaches, n^2, nlogn, and n.

19. Deep copy of a Linked List containg random pointers.
https://leetcode.com/problems/copy-list-with-random-pointer/submissions/1464878381/
->Make an interleaving pattern and then traverse that to assign the random pointers in a the copied LL.

20. Apply the mergesort on a linked list.
https://bit.ly/3GsXWsz
->Do it by making middle as null and dividing the linked list into small unitary linked lists.

21. Deleting the middle element from a Stack.
https://bit.ly/3ovTIu2
-> Use recursion for it and without creating another array or stack to store data.

22. Check  Valid Parenthesis
https://bit.ly/34kxPaq
->its easy but companies ask.

23. Minimum bracket reversal
https://bit.ly/3GAYRr5
-> Use recursion and remove the valid parenthesis.

24. Next Smallest Element
https://www.naukri.com/code360/problems/next-smaller-element_1112581?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0%3Fsource%3Dyoutube&campaign=Lovebabbarcodestudio&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbarcodestudio&leftPanelTabValue=SUBMISSION
-> Solve it via stack for O(n) solution rather than O(n^2).

25. Largest area histogram
https://leetcode.com/problems/largest-rectangle-in-histogram/description/
->Solve it using the logic used in 24 and in O(n) time.

26. The celebrity problem
https://www.naukri.com/code360/problems/the-celebrity-problem_982769?leftPanelTabValue=PROBLEM
->Solve it using most likely candidate in a stack and eleminating all others.

27. Maximal rectangular Area for 0s and 1s matrix.
https://leetcode.com/problems/maximal-rectangle/
->uses logic from 26 and 25. Its hard, so review 25 and 26 before attempting.

28.Implementing N stacks in an array.
https://www.naukri.com/code360/problems/n-stacks-in-an-array_1164271?leftPanelTabValue=SUBMISSION
->Create two seperate arrays for top and next. Top storing the respective number of stacks and next
 containing the next element after the respective top element. Have propper initialization for all of these arrays.

29. (special stack) Min Stack element at Tc = O(1); SC = O(1)  
https://www.naukri.com/code360/problems/design-a-stack-that-supports-getmin-in-o-1-time-and-o-1-extra-space_842465?topList=love-babbar-dsa-sheet-problems%3Fsource%3Dyoutube&campaign=Codestudio_Lovebabbar&utm_source=youtube&utm_medium=affiliate&utm_campaign=Codestudio_Lovebabbar&leftPanelTabValue=SUBMISSION
->Uses a specific formula. (2x - min);

30. Negative numbers in the first K groups of an array
https://www.geeksforgeeks.org/problems/first-negative-integer-in-every-window-of-size-k3345/1
->Use slinding window and deque to implement it

31. Gas station loop question
https://leetcode.com/problems/gas-station/description/
->use a deficit count alongside the balance to skip checking the iterated loop again.

32. Implementation of N queues in an Array.
->works on the same logic as implementation of stacks in an array. Do study it before this.

33. Min and Max element sum in k length window.
https://www.naukri.com/code360/problems/sum-of-minimum-and-maximum-elements-of-all-subarrays-of-size-k_1171047?leftPanelTabValue=SUBMISSION
->Uses sliding window with a min and max indices. similer to question number 30.

34. Review the Tree Creation and Methods of traversal.

35. Diameter of the binary Tree
https://leetcode.com/problems/diameter-of-binary-tree/
->Calculate the height of the left and right subtree along with the diameter at each depth.
try implementing it using pair<int,int> to reduce the time complexity to O(n);

36. Balanced Tree
https://leetcode.com/problems/balanced-binary-tree/
->Implement it using pair<bool, int> where second pair calculates hieght alongside the code.

37. Sum Tree check
https://www.geeksforgeeks.org/problems/sum-tree/1
-> Implement using pair<bool, int> where instead of checking height find the sum for left and right node.

38. ZigZag traversal In tree
https://www.geeksforgeeks.org/problems/zigzag-tree-traversal/1?page=2&company%5B%5D=Amazon&category%5B%5D=Tree&sortBy=
->Implementaion requires level order traversal but with creation of an array which alternates with each level. 

39. Vertical Traversal of a Binary Tree
https://www.geeksforgeeks.org/problems/print-a-binary-tree-in-vertical-order/1
-> Implementation requires maps and creation of complecated data types. Do revise it thoroughly.

40. Least common ancestor.
https://www.geeksforgeeks.org/problems/lowest-common-ancestor-in-a-binary-tree/1
->try using recursion and normal method.

41. Valid Path with sum K.
https://www.geeksforgeeks.org/problems/k-sum-paths/1
-> Uses backtracking. Have the loop for the array traversal start from behind to measure sum from the leaf to the root.

42. Highest sum of non adjacent nodes
https://www.geeksforgeeks.org/problems/maximum-sum-of-non-adjacent-nodes/1
->Use the inclusion and exclusion principle. 

43. Build a tree using post, pre and in order 
https://www.geeksforgeeks.org/problems/tree-from-postorder-and-inorder/1 || https://www.geeksforgeeks.org/problems/construct-tree-1/1
-> For pre the elements form 0 to size are roots, for in the elements to the left are left and right are right to the root
and for post the elements from size to 0 are the roots. The order of tree formation changes from left to right going from pre to post.

44. Minimum time to burn a Tree.
https://www.geeksforgeeks.org/problems/burning-tree/1
-> Has two approaches. Recursive and Level order. Create a mapping for parents and function to find the target 
element. Then track time to burn the tree.

45.Left, right, bottom and top view of a tree.

46. Morris Traversal for Inorder. Flattening a tree.
https://www.geeksforgeeks.org/problems/flatten-binary-tree-to-linked-list/1
-> Use morris traversal to solve it.

47. Implementation of BST and validation of the same 
(https://www.naukri.com/code360/problems/validate-bst_799483?leftPanelTab=0&leftPanelTabValue=SUBMISSION)

48. Finding the predecessor and successor in a BST.
https://www.naukri.com/code360/problems/_893049?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0&leftPanelTabValue=SUBMISSION

49. Finiding the LCA of a BST.
https://www.naukri.com/code360/problems/lca-in-a-bst_981280?leftPanelTab=0&leftPanelTabValue=SUBMISSION

50. Two sum in BST
https://www.naukri.com/code360/problems/two-sum-in-a-bst_1062631?leftPanelTab=0&leftPanelTabValue=SUBMISSION

51. Flatten a BST into a sorted Array.
https://www.naukri.com/code360/problems/flatten-bst-to-a-sorted-list_1169459?leftPanelTab=0&leftPanelTabValue=SUBMISSION

52. Normal BST to a Balanced BST 
https://www.naukri.com/code360/problems/normal-bst-to-balanced-bst_920472?leftPanelTab=0&leftPanelTabValue=PROBLEM

53. Building a BST using Preorder list
https://www.naukri.com/code360/problems/preorder-traversal-to-bst_893111?leftPanelTab=0&leftPanelTabValue=SUBMISSION

54. Merge two BST. both methods (important)

55. Size of the largest BST in a tree.
https://www.naukri.com/code360/problems/largest-bst-subtree_893103?leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar&leftPanelTabValue=SUBMISSION